* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
 29 changes: 29 additions & 0 deletions29  
src/App.js
@@ -0,0 +1,29 @@
import './App.css'

import Game from './components/Game'

const choicesList = [
  {
    id: 'ROCK',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rock-image.png',
  },
  {
    id: 'SCISSORS',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/scissor-image.png',
  },
  {
    id: 'PAPER',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/paper-image.png',
  },
]

const App = () => (
  <>
    <Game />
  </>
)

export default App
 17 changes: 17 additions & 0 deletions17  
src/components/Game/index.css
@@ -0,0 +1,17 @@
.popup-container {
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-self: flex-end;
}
.trigger-button {
  align-self: flex-end;
  border: none;
  background-color: transparent;
  font-size: 20px;
  color: #223a5f;
  margin-top: 10px;
  margin-bottom: 10px;
  cursor: pointer;
}
 239 changes: 239 additions & 0 deletions239  
src/components/Game/index.js
@@ -0,0 +1,239 @@
import {Component} from 'react'

import Popup from 'reactjs-popup'

import {RiCloseLine} from 'react-icons/ri'

import './index.css'

import {
  AppBackground,
  ButtonStyle,
  ScoreCard,
  HeadingCounter,
  ScoreCont,
  HeadingStyle,
  ScoreHeadingStyle,
  ButtonsContainer,
  ImageStyle,
  ResultsView,
  ResultsOptionContainer,
  PlayAgainButton,
  GameResult,
  RulesButton,
  PopupContainer,
} from './styledComponents'

const choicesList = [
  {
    id: 'ROCK',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rock-image.png',
  },
  {
    id: 'SCISSORS',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/scissor-image.png',
  },
  {
    id: 'PAPER',
    imageUrl:
      'https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/paper-image.png',
  },
]
const OptionButton = props => {
  const {eachOption, onClickingButton} = props
  const {id, imageUrl} = eachOption
  const clickingButton = () => {
    onClickingButton(id, imageUrl)
  }
  return (
    <ButtonStyle
      data-testId={`${id.toLowerCase()}Button`}
      type="button"
      onClick={clickingButton}
    >
      <ImageStyle src={imageUrl} alt={id} />
    </ButtonStyle>
  )
}

class Game extends Component {
  state = {
    score: 0,
    userOptionUrl: '',
    OpponentUrl: '',
    userOption: '',
    opponent: '',
    resultDisplay: false,
    gameCondition: '',
  }

  onClickingButton = (id, imageUrl) => {
    const randomId = Math.floor(Math.random() * 3)
    const opponentOption = choicesList[randomId]

    if (id === 'SCISSORS') {
      if (opponentOption.id === 'PAPER') {
        this.setState(prevState => ({
          score: prevState.score + 1,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'WON',
        }))
      } else if (opponentOption.id === 'ROCK') {
        this.setState(prevState => ({
          score: prevState.score - 1,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'LOSE',
        }))
      } else {
        this.setState(prevState => ({
          score: prevState.score,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'IT IS DRAW',
        }))
      }
    } else if (id === 'PAPER') {
      if (opponentOption.id === 'ROCK') {
        this.setState(prevState => ({
          score: prevState.score + 1,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'WON',
        }))
      } else if (opponentOption.id === 'SCISSORS') {
        this.setState(prevState => ({
          score: prevState.score - 1,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'LOSE',
        }))
      } else {
        this.setState(prevState => ({
          score: prevState.score,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'IT IS DRAW',
        }))
      }
    } else if (id === 'ROCK') {
      if (opponentOption.id === 'SCISSORS') {
        this.setState(prevState => ({
          score: prevState.score + 1,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'WON',
        }))
      } else if (opponentOption.id === 'PAPER') {
        this.setState(prevState => ({
          score: prevState.score - 1,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'LOSE',
        }))
      } else {
        this.setState(prevState => ({
          score: prevState.score,
          userOptionUrl: imageUrl,
          OpponentUrl: opponentOption.imageUrl,
          resultDisplay: true,
          gameCondition: 'IT IS DRAW',
        }))
      }
    }
  }

  playagin = () => {
    this.setState({resultDisplay: false})
  }

  render() {
    const {
      score,
      resultDisplay,
      userOptionUrl,
      OpponentUrl,
      gameCondition,
    } = this.state
    return (
      <AppBackground>
        <ScoreCard>
          <HeadingCounter>
            <HeadingStyle>Rock Paper Scissors</HeadingStyle>
          </HeadingCounter>
          <ScoreCont>
            <ScoreHeadingStyle>Score</ScoreHeadingStyle>
            <ScoreHeadingStyle>{score}</ScoreHeadingStyle>
          </ScoreCont>
        </ScoreCard>
        {!resultDisplay && (
          <ButtonsContainer>
            {choicesList.map(eachOption => (
              <OptionButton
                onClickingButton={this.onClickingButton}
                key={eachOption.id}
                eachOption={eachOption}
              />
            ))}
          </ButtonsContainer>
        )}

        {resultDisplay && (
          <ResultsView>
            <ResultsOptionContainer>
              <HeadingStyle>YOU</HeadingStyle>
              <ImageStyle alt="your choice" src={userOptionUrl} />
            </ResultsOptionContainer>
            <ResultsOptionContainer>
              <HeadingStyle>OPPONENT</HeadingStyle>
              <ImageStyle alt="opponent choice" src={OpponentUrl} />
            </ResultsOptionContainer>
            <ResultsOptionContainer>
              {gameCondition === 'IT IS DRAW' ? (
                <GameResult>IT IS DRAW</GameResult>
              ) : (
                <GameResult>YOU {gameCondition}</GameResult>
              )}
              <PlayAgainButton onClick={this.playagin}>
                PLAY AGAIN
              </PlayAgainButton>
            </ResultsOptionContainer>
          </ResultsView>
        )}
        <div className="popup-container">
          <Popup modal trigger={<RulesButton>Rules</RulesButton>}>
            {close => (
              <>
                <PopupContainer>
                  <button
                    type="button"
                    className="trigger-button"
                    onClick={() => close()}
                  >
                    <RiCloseLine />
                  </button>
                  <img
                    src="https://assets.ccbp.in/frontend/react-js/rock-paper-scissor/rules-image.png"
                    alt="rules"
                  />
                </PopupContainer>
              </>
            )}
          </Popup>
        </div>
      </AppBackground>
    )
  }
}
export default Game
 133 changes: 133 additions & 0 deletions133  
src/components/Game/styledComponents.js
@@ -0,0 +1,133 @@
import styled from 'styled-components'

export const AppBackground = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  background-color: #223a5f;
  min-height: 100vh;
  padding: 30px 30px 30px 30px;
  flex-shrink: 0;
  @media screen and (min-width: 576px) {
    padding: 30px 50px 30px 50px;
  }
`
export const ButtonStyle = styled.button`
  background-color: transparent;
  border: none;
  cursor: pointer;
`
export const ImageStyle = styled.img`
  height: 150px;
  @media screen and (min-width: 575px) {
    height: 220px;
  }
`
export const ScoreCard = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  padding: 15px;
  border: 1px solid #ffffff;
  border-radius: 10px;
  width: 100%;
`
export const ScoreCont = styled.div`
  display: flex;
  flex-direction: column;
  border-radius: 10px;
  justify-content: center;
  align-items: center;
  background-color: #ffffff;
  padding: 25px;
`
export const HeadingCounter = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  color: white;
  font-family: Bree serif;
  width: 20%;
  @media screen and (min-width: 576px) {
    width: 10%;
  }
`
export const HeadingStyle = styled.h1`
  margin-bottom: 5px;
  margin-top: 5px;
  color: white;
`
export const ScoreHeadingStyle = styled.p`
  margin-bottom: 5px;
  margin-top: 5px;
  color: #223a5f;
  font-weight: bold;
  font-family: Roboto;
  font-size: 24px;
`
export const ButtonsContainer = styled.div`
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-around;
  padding-top: 50px;
  @media screen and (min-width: 576px) {
    width: 40%;
  }
`

export const ResultsView = styled.div`
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-around;
  padding-top: 50px;
  width: 100%;
`
export const ResultsOptionContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 50%;
`
export const PlayAgainButton = styled.button`
  background-color: white;
  color: #223a5f;
  padding: 10px 15px 10px 15px;
  border: none;
  border-radius: 8px;
  font-family: Bree serif;
  font-size: 16px;
  cursor: pointer;
  margin-bottom: 15px;
`
export const GameResult = styled.p`
  color: white;
  align-self: center;
  font-size: 24px;
  font-weight: bold;
`
export const RulesButton = styled.button`
  background-color: white;
  color: #223a5f;
  padding: 10px 15px 10px 15px;
  border: none;
  border-radius: 8px;
  font-family: Bree serif;
  font-size: 16px;
  cursor: pointer;
  align-self: flex-end;
`
export const PopupContainer = styled.div`
  display: flex;
  flex-direction: column;
  margin: 40px;
  background-color: white;
  padding: 10px 40px 40px 40px;
  width: 50%;
  text-align: center;
`
 10 changes: 10 additions & 0 deletions10  
src/index.js
@@ -0,0 +1,10 @@
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root'),
)
 4 changes: 4 additions & 0 deletions4  
src/setupTests.js
@@ -0,0 +1,4 @@
/* eslint-disable */

import '@testing-library/jest-dom'
import {configure} from '@testing-library/react'
